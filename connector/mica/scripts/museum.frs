_HELLO_ :: { hello | hi | good morning } ;;
_YES_ :: { yes | ok | okay | fine | no problem | sure | whatever you say } ;;
_NO_ :: { no | never | not { really | on your life } | * off  } ;;
_NEXT_ :: * { NOMOREALTS | <_YES_> | go on | keep going } *;;

load("eliza.frs");;

museum ::
	domain demo
	trigger { init }
	
	init ==>
	[
		Welcome to the School of Computer Science and Engineering. We can talk
		about lot's of things, including Alan Turing and his ideas on Artificial
		Intelligence.
	]
	
	* <_HELLO_> * ==>
	[
		We have a great exhibit on Charles Babbage and
		computers in general.
	|
		We can talk about other things, like Robotics and
		Machine Learning.
	]
;;

babbage ::
	domain demo
	trigger { * { babbage | baggage | ada | lovelace | love lace } * }
	failsafe babbage_failsafe
	
	* {gears | complicated | mechanical} * ==>
		#goto(babbage_yes, ^0)
	
	* <_YES_> * ==>
	[
		OK, tell me. Why? #goto(babbage_yes)
	]
	
	{ * why * | * <_NO_> * } ==>
		#goto(babbage_no, init)

	{ * { charles | babbage | baggage } * } ==>
	[
		In the mid 1800's, the English mathematician, Charles
		Babbage, designed a general purpose mechanical calculating
		machine that anticipated the principles and structure of
		the modern computer. Do you know why he was never able to
		finish building his Analytical Engine and why we didn't
		have mechanical computers 100 years earlier?
	]
;;

babbage_yes ::
	inherits babbage
	* {gears | complicated | mechanical} * ==>
	[
		That's right. The only technology Babbage had available to
		him consisted of wheels, gears and steam power. His
		calculating engines were more complicated than anything
		anyone had yet built.
		#goto(babbage_spinoff)
	]

	<_NEXT_> ==>
		#goto(babbage_no, init)
;;

babbage_no ::
	init ==>
	[
		The only technology Babbage had available to him
		consisted of wheels, gears and steam power. His
		calculating engines were more complicated than anything
		anyone had yet built.
		#goto(babbage_spinoff)
	]
;;

babbage_spinoff ::

	<_NEXT_> ==>
	[
		Even though Babbage's work was never finished, there were
		some important side effects of his research. Machining and
		manufacturing technology improved as a result of attempts
		to build the calculating machines. Apart from Charles Babbage,
		someone else connected with his project interests me. 
		#goto(ada, init)
	]	
;;

ada ::

	init ==>
	[
		Have you heard of Lady Lovelace?
	]

	* <_YES_> * ==>
	[
		So you know that she was the world's first programmer.
	]

	* { NOMOREALTS | ada | lovelace | love lace | <_NO_> } * ==>
	[
		Lady Lovelace was Charles Babbage's assistant and the
		world's first computer programmer. Her first name was "Ada"
		and now there is a programming language called Ada, in her
		honor.
	]
;;


babbage_failsafe ::
	* { ada | lovelace | love lace } * ==>
		#goto(ada, ^0)

	* {boring | bored | not interested} * ==>
	[
		We're very proud to have a component of Babbage's
		Difference Engine Number 1 in this museum. You can see
		it, and an amazing digital reconstruction of the whole
		machine, right here in this exhibition.
	]
;;

turing ::
	domain demo
	trigger { * { turing | cheering } * }
	
	* test * ==>
		#goto(turing_test, init)
	
	{ * { alan  | turing | cheering } * } ==>
	[
		Alan Turing is my hero!
		#goto(turing_preamble, init)
	]
;;

turing_preamble ::
	init ==>
	[
		As early as the mid 1930's Alan Turing  had the
		underlying mathematical idea on  which the computers
		of today are  based. He was also one of the
		founders of what we now call Artificial Intelligence
		or AI. He invented a test for intelligence. Shall I
		describe it?
	]

	{ * { <_YES_> | describe } * } ==> 
		#goto(turing_test, init)

	* <_NO_> * ==>
	[
		Well, I think Alan Turing was an interesting person,
		but we can move on.
		#goto(museum)
	]
;;

turing_test ::
	init ==>
	[
		Turing was the first to put up a testable 
		definition of Artificial Intelligence. He 
		phrased it as an 'imitation game', and it
		has come to be known as the Turing Test.
		No one has come near to this criterion as yet. 
		Competitions are held every year.
	]

	* { describ~ | what is it | what * test | tell } * ==>
	[
		Turing's "imitation game" was designed for  detecting
		the presence of intelligent thought  processes in
		computer systems. It has become  known as "The Turing Test".
		The candidate  program is interrogated alongside
		a human.  Both are remotely connected to a human 
		examiner. If the latter can't score better  than
		seventy per cent correct in spotting  which is the
		computer and which is the human, then the machine has
		demonstrated its  possession of some degree of
		intelligence. The same paper, which appeared in 1950,
		contained an extraordinary proposal. This "child machine"
		project was overlooked, and remains so to this day.
	]

	* { proposal | what * it | what * that | what * was | what * did |
		child * machine | what * project } * ==>
	[
		The proposal appears at the very end, where Turing
		considers something more challenging than a machine
		with just enough  smarts to get it through the Turing
		Test. How precisely are we to design and build a
		machine with human-type and human-level intelligence?
		His recipe was first, to develop a system that can
		learn  from experience, from instruction and from
		imitation. Then spend as long as it  takes to train
		it and educate it to human  standards.
	]
;;

hci::
	domain demo
	trigger { * { hci | h c i | interface~ | language~ } * }

	{ * { hci | h c i | interface~ | language~ } * } ==>
	[
		An interface is the boundary across which two systems
		communicate. The human-computer interface is the
		connecting point between a computer and the person
		using it.
	]

	<_NEXT_> ==>
	[
		In recent years the focus of computer interface design
		has shifted from the machine to the user. A well-designed
		interface helps people perform tasks. Most would agree
		that there is room for improvement.
	|
		#goto(current_context(), << something else >>)
	]
;;

media ::
	domain demo
	trigger {* { communic~ | media } * }

	{* { communic~ | media } * } ==>
	[
		A media revolution is under way. The computer allows us
		to combine words, sounds and pictures to form interactive
		multimedia. It also allows us to create sounds and images
		we sometimes find hard to distinguish from reality.
	]

	<_NEXT_> ==>
	[
		#goto(current_context(), << something else >>)
	]
;;

simulation ::
	domain demo
	trigger { * { simulation~ | visuali~ation } * }

	{ * { simulation~ | visuali~ation } * } ==>
	[
		Simulation and visualisation examines the way in which we
		use computers to enhance the human capacity to imagine
		and predict events and understand processes.
	]

	<_NEXT_> ==>
	[
		#goto(current_context(), << something else >>)
	]
;;

stumpy ::
	domain demo
	trigger { * { robot~ | learn~ | stump~ } * }

	* <_YES_> * ==>
	[
		I think Stumpy is cute. What did you think?
		#goto(stumpy_learn, init)
	]

	* <_NO_> * ==>
	[
		You should go see it. It's fun. It's a insect-like robot
		that learns how to walk. Do you want to know how it
		learns?
		#goto(stumpy_learn)
	]
	
	{ * { robot~ | learn~ | stump~ } * } ==>
	[
		Have you seen Stumpy, the six-legged robot, learning to
		walk?
	]
;;

stumpy_learn ::
	init ==>
	[
		Do you want to know how it learns?
	]

	* <_YES_> * ==>
	[
		Stumpy starts out not knowing how to move its legs get
		to forward motion, so it just begins by
		trial-and-error. The robot drags a computer mouse
		behind it. This is Stumpy's sensor to tell it if it's
		moved forward or backward. If it moves forward, it gets
		a positive reward, otherwise it gets a negative reward.
		Stumpy remembers which sequence of actions lead to
		positive rewards and tries to maximize the reward.
	]

	* <_NO_> * ==>
	[
		You're not much fun, are you!
	]
;;

computers ::
	domain demo
	trigger { * { comput~ | universal } * }

	{ * { comput~ | universal } * } ==>
	[
		We can talk about computers. Do you like playing with
		computers?
	]

	* { <_YES_> | <_NO_> } * ==>
		#goto(what_is_a_computer, init)
;;

what_is_a_computer ::
	init ==>
	[
		Do you really know what a computer is?
	]
	
	{ NOMOREALTS | * { <_YES_> | <_NO_> } * } ==>
	[
		Well, have you ever played with a construction set,
		like Lego or Meccano?
		#goto(what_is_a_computer_1)
	]
;;

what_is_a_computer_1 ::
	* <_YES_> * ==>
	[
		OK, so you know that what you get is a collection of
		building blocks and some plans. Right?
		#goto(what_is_a_computer_2)
	]

	* <_NO_> * ==>
	[
		A construction set comes with a bunch of different kinds
		of building blocks and usually a set of plans to show you
		how to put the block together to make something like a
		toy car or crane. Got it?
		#goto(what_is_a_computer_2)
	]
;;

what_is_a_computer_2 ::

	{ <_NEXT_> | * <_NO_>* } ==>
	[
		What you get out of the box is an incomplete machine. To
		make a complete machine you need a set of plans for
		putting the blocks together in a sensible way. OK?
	|
		A computer is just like a construction kit. Think of
		the hardware, that's the stuff you can see and touch,
		as a set of building blocks. These building blocks
		are for manipulating information. You put the block
		together by writing a program. That's like the
		construction plans for the machine.
	]
;;

internet ::
	domain demo
	trigger { * { web | internet } * }

	{ * { web | internet } * } ==>
	[
		Today, millions of  people worldwide use the
		internet to publish, communicate, design and research.
		In this section, you can surf the net and explore the
		development of electronic communications.
	]
;;

museum_failsafe ::
	failsafe eliza
	
	* something {else | different} * ==>
	[
		What else would you like to talk about?
	|
		We can talk about
			{ Alan Turing | Charles Babbage | the internet | Stumpy |
				H C I } if you want.
	]
;;

failsafe(demo, museum_failsafe);;